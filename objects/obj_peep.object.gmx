<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Peep</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scr_peep_init()
x+=16
y+=16

foe = -1;
team = 0;

state = 'idle';
spd = 3;
acc = 0.5;

selected = false;
superselected = false;
selectorAngle = 0;

myPath = path_add();
target = noone;

///Fire Up The Brain
alarm[0] = irandom_range( 120, 240 );
alarm[1] = 0

mySpeed=0;
commanded=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Working

if ( instance_exists( target ) ) {
    //if its my target // if its a resource
    if ( object_get_name(object_get_parent(target.object_index)) = 'obj_resource' ) {
        //Harvest Wood
        if ( target.bounty &gt; 0 ) {
            target.bounty -=1
            alarm[1]=120
        } else {
            //Place Wood in my inventory
            for ( var i = 6; i &lt; 17; i+=1 ) {
                if ( inventory[# 0, i] = noone ) {
                    //May need a script for this.. so it can be cleaned up
                    //Find out what I just harvested
                    if ( object_get_name(target.object_index) = 'obj_tree' ) { 
                        var temp = asset_get_index('obj_wood_material');  
                    }
                    if ( object_get_name(target.object_index) = 'obj_stone' ) { 
                        var temp = asset_get_index('obj_rock_material');  
                    }
                    inventory[# 0, i] = temp; 
                    with( target ) {
                        instance_destroy();
                    }
                    alarm[1]=0
                    target = noone;
                    state = 'idle'
                    break;   
                } 
            }
        } 
    } else if ( object_get_name(object_get_parent(target.object_index)) = 'obj_tool' ) {
        //Add "Work" to tool
        if ( target.work &lt; 5 ) {
            target.work +=1
            alarm[1]=120
        } else {

        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start of AI Brain Tick

//Find an enemy and try to path to him.
if ( commanded = false ) {
    if (instance_exists(obj_npc_peep)) {
        target = instance_nearest(x, y, obj_npc_peep);
        
        var dist = point_distance(x,y,target.x,target.y)
        if (dist &lt; 1024 ) {
            
            //True if he CANT see him...
            var sight = collision_line(x, y, target.x, target.y, obj_tree, false, true);
            if ( sight ) {
            
                if ( path_exists(myPath) ) {
                
                    if ( mp_grid_path(global.grid, myPath, (x div 32) * 32 + 16, (y div 32) * 32 + 16, (target.x div 32) * 32 + 16, (target.y div 32) * 32 + 16, true) ) {
                        state = 'move';
                        
                        //Check for something at the end of the path
                        while ( collision_point( path_get_x(myPath,1), path_get_y(myPath,1), obj_peep, false, true ) ) {
                            path_delete_point(myPath, path_get_number(myPath) - 1 );  
                        }
                        path_start(myPath, mySpeed, 0,  false);
                        alarm[0] = 90;
                    
                    }
                }
                
            } else {
    
                if ( path_exists(myPath) ) {
                
                    if ( mp_grid_path(global.grid, myPath, (x div 32) * 32 + 16, (y div 32) * 32 + 16, (target.x div 32) * 32 + 16, (target.y div 32) * 32 + 16, true) ) {
                        //Check for something at the end of the path
                        while ( collision_point( path_get_x(myPath,1), path_get_y(myPath,1), obj_peep, false, true ) ) {
                            path_delete_point(myPath, path_get_number(myPath) - 1 );  
                        }                       
                        state = 'move';
                        path_start(myPath, mySpeed, 0,  false);
                        alarm[0] = 30;
                    
                    }
                }
            }
                  
        } else {
            state = 'idle';
            alarm[0] = 180; 
               
        }
         
    } else {
        state = 'idle';
        alarm[0] = 180;
        
    }

} else {
    alarm[0] = 90; 
        
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set My Depth, handle drag-select, execute states

//Face the direction were moving
image_angle=direction;

if ( global.select_multi == true &amp;&amp; team == 0 ) {
    if ( distance_to_point(global.start_x,global.start_y) &lt;= 1024 ) {
        var check;
        check = rectangle_in_rectangle( bbox_left, bbox_top, bbox_right, bbox_bottom, global.start_x, global.start_y, global.end_x, global.end_y );
        if ( check != 0 ) {
            selected = true;
        }
        else {
            if ( !keyboard_check(vk_shift) ) {
                selected = false;
            }
        }
    }  
}

if ( selected == true ) {
    selectorAngle += 4;
}

if ( state == 'move' ) {
    if ( path_position != 1 ) {
    
        if ( path_position &lt;= 0.95 ) {     
            mySpeed += 0.05
            if ( mySpeed &gt; 3 ) { mySpeed = 3 }
        } else {
            mySpeed -= 0.1
            if ( mySpeed &lt; 1 ) { mySpeed = 1 }
        }
        path_speed=mySpeed;
    
    } else {
        state = 'idle';
        commanded=false;
    
    }
}

if ( state == 'idle' ) {
    mySpeed = 0;
    if ( alarm[0] = -1 ) {
        alarm[0]=180
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_peep">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide away

if (state == 'idle') {
    var away = point_direction(other.x + (other.sprite_width div 2) , other.y + (other.sprite_width div 2), x + (sprite_width div 2), y + (sprite_width div 2));
    x += lengthdir_x(0.5, away);
    y += lengthdir_y(0.5, away);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tree">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide away

if (state == 'idle') {
    var away = point_direction(other.x + (other.sprite_width div 2) , other.y + (other.sprite_width div 2), x + (sprite_width div 2), y + (sprite_width div 2));
    x += lengthdir_x(2, away);
    y += lengthdir_y(2, away);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_goto">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interact With Goto Object

//Doublecheck it still exists
if ( instance_exists( target ) ) {
    //Is it my target?
    if ( other.id = target.id ) {
        //Destroy it
        with ( target ) {
            instance_destroy();
        }
        target = noone;
        state = 'idle'
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( !path_exists(myPath) ) {
                
    myPath = path_add();
    if ( mp_grid_path(global.grid, myPath, (x div 32) * 32 + 16, (y div 32) * 32 + 16, (mouse_x div 32) * 32 + 16, (mouse_y div 32) * 32 + 16, true) ) {
    
        //Try to optimize Paths
        if ( !collision_line(path_get_x(myPath,0), path_get_y(myPath,0), path_get_x(myPath,1),path_get_y(myPath,1),obj_tree, false, true) ) {
            var tX1 = path_get_x(myPath,0)
            var tY1 = path_get_y(myPath,0)
            var tX2 = path_get_x(myPath,1)
            var tY2 = path_get_y(myPath,1)
            path_clear_points(myPath);
            path_insert_point(myPath,0, tX1, tY1, 100);
            path_insert_point(myPath,1, tX2, tY2, 100);
            path_start(myPath, mySpeed, 0, false);
            state = 'move';
            
        } else {
            path_set_precision(myPath, 2);
            path_set_kind(myPath, 1);
            path_start(myPath, mySpeed, 0, false);
            state = 'move';

        }
    }

} else {

    path_clear_points(myPath);
    if ( mp_grid_path(global.grid, myPath, (x div 32) * 32 + 16, (y div 32) * 32 + 16, (mouse_x div 32) * 32 + 16, (mouse_y div 32) * 32 + 16, true) ) {
            
        if ( !collision_line(path_get_x(myPath,0), path_get_y(myPath,0), path_get_x(myPath,1),path_get_y(myPath,1),obj_tree, false, true) ) {
            var tX1 = path_get_x(myPath,0)
            var tY1 = path_get_y(myPath,0)
            var tX2 = path_get_x(myPath,1)
            var tY2 = path_get_y(myPath,1)
            path_clear_points(myPath);
            path_insert_point(myPath,0, tX1, tY1, 100);
            path_insert_point(myPath,1, tX2, tY2, 100);
            path_start(myPath, mySpeed, 0, false);
            state = 'move';
        
        } else {
            
            //Check for something at the end of the path
            while ( collision_point( path_get_x(myPath,1), path_get_y(myPath,1), obj_peep, false, true ) ) {
                path_delete_point(myPath, path_get_number(myPath) - 1 );  
            }
            mp_grid_clear_cell( global.grid, ( path_get_x(myPath,0) div 32 ), ( path_get_y(myPath,0) div 32 ) );
            mp_grid_add_cell( global.grid, ( path_get_x(myPath,1) div 32 ), ( path_get_y(myPath,1) div 32 ) );             
            path_set_precision(myPath, 2);
            path_set_kind(myPath, 1);
            path_start(myPath, mySpeed, 0, true);
            state = 'move';
                                            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( selected == true ) {
    if ( team = 0 ) {
        draw_sprite_ext(spr_selected, 0, x, y, 1, 1, selectorAngle, c_white, 0.75);
    }
    else {
        draw_sprite_ext(spr_selected, 0, x, y, 1, 1, selectorAngle, c_red, 0.75);
    }
    
}

draw_self();
//draw_sprite_ext(spr_Claws, 0, x, y, 1, 1, image_angle, c_white, 1);
if ( path_get_number(myPath) &gt; 0 ) {
    draw_set_colour(c_black);
    for ( var p = 0; p &lt; path_get_number(myPath); p+=1 ) {
        draw_circle(path_get_point_x(myPath, p), path_get_point_y(myPath, p), 4, false);   
    }
    draw_path(myPath, x, y, true);
}

draw_text(x, y-32, string(alarm[0]));
draw_text(x, y-48, state);
draw_text(x, y-64, commanded);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
